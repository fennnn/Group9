#ifndef ACCOUNT
#define ACCOUNT

/* filename: Acount.h
 * Programmers: Matthew Greenlaw, (Add your name here)
 * Class Number: CS-300 
 * Date: 22NOV17 
 * Purpose: 
 * The Account class will have fields for a name, ID number, email address, and
 * security level, as well as methods to set those fields, get those fields, and
 * create an account. The name, address, email, and security level will all
 * initially be set by a ChocAn manager via the create method, and then a unique
 * ID number will be generated by the system and applied to the appropriate
 * field. The set info method will read in information for all of the fields in
 * the class and set those fields from that information. The Account class will
 * have a get info method that will retrieve the information from the name, ID
 * number, email, and address fields, and return them via a structure to be used
 * by other methods in the system. A security check method will be implemented,
 * this will be used to retrieve the information stored in the security level
 * field that will determine the level of access a given account has to the rest
 * of the systems functionality. 
 */

#include "list" //http://www.cplusplus.com/reference/list/list/
#include "string" //http://www.cplusplus.com/reference/string/string/

struct Record {
	//used for complilation only
	//@todo remove once implemented
};


enum MEMBER_STATUS {
	current, 
	expired
}; typedef enum MEMBER_STATUS MEMBER_STATUS;

enum SECURITY_LEVEL {
	init,
	manager,
	provider,
	member
}; typedef enum SECURITY_LEVEL SECURITY_LEVEL;


class Account {
public:
	Account ( void );
	Account ( const Account & );
	Account ( std :: string * newName, std :: string * newEmail, int newID, SECURITY_LEVEL newSecurityLevel );
	~Account ( void );

protected:
	std :: string * name;
	int ID;
	std :: string * email;
	SECURITY_LEVEL securityLevel;
};

class Manager : public Account {
public:
	Manager ( void );
	Manager ( const Manager & );
	Manager ( std :: string * newName, std :: string * newEmail, int newID, SECURITY_LEVEL newSecurityLevel, std :: string * newPassword );
	~Manager ( void );

	bool setPassword ( std :: string * newPassword );
	bool checkPassword ( std :: string * passwordToCheck );

protected:
	std :: string * password;
};

class Provider : public Account {
public:
	Provider ( void );
	Provider ( const Provider & );
	Provider ( std :: string * newName, std :: string * newEmail, int newID, SECURITY_LEVEL newSecurityLevel,
std :: string * newPassword, int newNumMembersSeen, std :: list < int > * newMembersSeen, std :: list < Record >  * newServiceRecord);
	~Provider ( void );

	bool setPassword ( std :: string * newPassword );
	bool checkPassword ( std :: string * passwordToCheck );
	bool displayAllMembers ( void );
	bool addServiceRecord ( Record serviceRecord );
	bool addMemberSeen ( int memberID );

protected:
	std :: string * password;
	int numMembersSeen;
	std :: list < int > * membersSeen; //Wasn't shown as a pointer, but maybe it should be?
	std :: list < Record > * serviceRecord; //Wasn't shown as a pointer, but maybe it should be?
};

class Member : public Account {
public:
	Member ( void );
	Member ( const Member & );
	Member ( std :: string * newName, std :: string * newEmail, int newID, SECURITY_LEVEL newSecurityLevel,
MEMBER_STATUS newStatus, std :: list < Record > * newServiceRecord );
	~Member ( void );

	bool setMemberStatus ( MEMBER_STATUS newStatus );
	MEMBER_STATUS getMemberStatus ( void );
	bool appendToServiceRecord ( Record newServiceRecord);
	std :: list < Record > * getServiceRecords ( void );

protected:
	std :: list < Record > * serviceRecord; //Should this be a pointer?
	MEMBER_STATUS status;
};

#endif