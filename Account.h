#ifndef ACCOUNT
#define ACCOUNT

/* filename: Acount.h
 * Programmers: Matthew Greenlaw, Dmitri Murphy, (Add your name here)
 * Class Number: CS-300 
 * Date: 22NOV17 
 * Purpose: 
 * The Account class will have fields for a name, ID number, email address, and
 * security level, as well as methods to set those fields, get those fields, and
 * create an account. The name, address, email, and security level will all
 * initially be set by a ChocAn manager via the create method, and then a unique
 * ID number will be generated by the system and applied to the appropriate
 * field. The set info method will read in information for all of the fields in
 * the class and set those fields from that information. The Account class will
 * have a get info method that will retrieve the information from the name, ID
 * number, email, and address fields, and return them via a structure to be used
 * by other methods in the system. A security check method will be implemented,
 * this will be used to retrieve the information stored in the security level
 * field that will determine the level of access a given account has to the rest
 * of the systems functionality. 
 */



/* *** Enumerations
 * - Use to denote different statuses
 *   and security levels.
 */
enum MEMBER_STATUS {
	current, 
	expired
}; typedef enum MEMBER_STATUS MEMBER_STATUS;

enum SECURITY_LEVEL {
	init,
	manager,
	provider,
	member
}; typedef enum SECURITY_LEVEL SECURITY_LEVEL;

typedef SECURITY_LEVEL ACCOUNT_TYPE;


class address {
public:
	address();
	address(string* streetAdress, string* city, string* state, string* zipcode);
    address(const address & toCopy);
	~address();
	bool setAddress(string* streetAdress, string* city, string* state, string* zipcode);
    void setAddress(const char* streetAdress, const char*  city, const char*  state, const char* zipcode);
	string* getFullAddress();
	string* getStreetAddress();
	string* getCity();
	string* getState();
	string* getZipcode();

private:
	string * streetAdress;
	string * city;
	string * state;
	string * zipcode;
};



/*
 *  STRUCTS
 */

struct infoStruct {
    string* ID;
    string* name;
    address* theAddress;
    string* email;
    int securityLevel;
};


struct Record {
    //used for complilation only
    //@todo remove once implemented
};

struct memberRecord {
    string dateOfService;
    string providerName;
    string serviceName;
};


struct providerRecord {
    string currentDateTime;
    string dateOfService;
    string memberName;
    string memberID;
    string serviceCode;
    string serviceFee;
};



// ******* Account Class *******

class Account {
public:
	Account ( void );
	Account ( const Account & );
    Account ( infoStruct* newInfo);
	Account ( string * newName, string * newEmail, string *newID, address *newAddress, SECURITY_LEVEL newSecurityLevel );
	~Account ( void );
	void display();
	infoStruct* getInfo();
	SECURITY_LEVEL getSecurityLevel();


protected:
	string * name;
	string * ID;
	string * email;
    address * theAddress;
	SECURITY_LEVEL securityLevel;
    
};

/* From assignment:
- Member street address (25 characters).
- Member city (14 characters).
- Member state (2 letters).
- Member zip code (5 digits).
 */

// ******* Manager Class *******

class Manager : public Account {
public:
	Manager ( void );
	Manager ( const Manager & );
	Manager ( string * newName, string * newEmail, string *newID, address *newAddress, SECURITY_LEVEL newSecurityLevel, string * newPassword );
	~Manager ( void );

	bool setPassword (   string * newPassword );
	bool checkPassword (   string * passwordToCheck );

protected:
	string * password;
};



// ******* Provider Class *******

class Provider : public Account {
public:
	Provider ( void );
	Provider ( const Provider & );
	Provider ( string * newName, string * newEmail, string *newID, address *newAddress, SECURITY_LEVEL newSecurityLevel,
  	string * newPassword, int newNumMembersSeen,   list < int > * newMembersSeen,   list < providerRecord >  * newServiceRecord);
	~Provider ( void );

	bool setPassword (   string * newPassword );
	bool checkPassword (   string * passwordToCheck );
	bool displayAllMembers ( void );
	bool addServiceRecord ( providerRecord* newServiceRecord );
	bool addMemberSeen ( int memberID );

protected:
	string * password;
	int numMembersSeen;
	list < int > * membersSeen; //Wasn't shown as a pointer, but maybe it should be?
	list < providerRecord > * serviceRecord; //Wasn't shown as a pointer, but maybe it should be?
};



// ******* Member Class *******

class Member : public Account {
public:
	Member ( void );
	Member ( const Member & );
	Member ( string * newName, string * newEmail, string *newID, address *newAddress, SECURITY_LEVEL newSecurityLevel,
	MEMBER_STATUS newStatus,   list < memberRecord > * newServiceRecord );
	~Member ( void );

	bool setMemberStatus ( MEMBER_STATUS newStatus );
	MEMBER_STATUS getMemberStatus ( void );
	bool appendToServiceRecord ( memberRecord newServiceRecord);
	list < memberRecord > * getServiceRecords ( void );

protected:
	list < memberRecord > * serviceRecord; //Should this be a pointer? // Yes, I think so...
	MEMBER_STATUS status;
};

#endif
